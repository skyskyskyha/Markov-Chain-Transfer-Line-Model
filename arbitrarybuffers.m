% r is a vector of 2 values represents the repair probability for m1 and m2
% f is a vector of 2 values represents the fail probability for m1 and m2
% N is the size of buffers
function [T]=arbitrarybuffers(r,f,N)

if (N==1)
    %The state equation for 4 states when the max buffer is 1
    %p(0,0,1)=(1-r1)*p(0,0,1)+f1*p(0,1,1)
    %p(0,1,1)=r2*p(1,1,0)+f2*p(1,1,1)
    %p(1,1,0)=(1-r2)*p(1,1,0)+f2*p(1,1,1)
    %p(1,1,1)=r1*p(0,0,1)+(1-f1)*p(0,1,1)
    
    %The transition matrix for the above 4 states
    T =[
        1-r(1),f(1),0,0;
        0,0,r(2),1-f(2);
        0,0,1-r(2),f(2);
        r(1),1-f(1),0,0;
        ];
    return;
end

if (N==2)
    %The state equation for 4(non-transient) states when the max buffer is 2
    %p(0,0,1)=(1-r1)*p(0,0,1)+(1-r1)r2*p(1,0,0)+f1(1-f2)*p(1,1,1)
    %p(1,0,0)=(1-r1)(1-r2)*p(1,0,0)+f1f2*p(1,1,1)
    %p(1,1,1)=r1*p(0,0,1)+r1r2*p(1,0,0)+(1-f1)(1-f2)*p(1,1,1)+r2*p(2,1,0)
    %p(2,1,0)=r1(1-r2)*p(1,0,0)+(1-f1)f2*p(1,1,1)+(1-r2)*p(2,1,0)
    
    %The transition matrix for above 4 states
    T =[
        1-r(1),(1-r(1))*r(2),f(1)*(1-f(2)),0;
        0,(1-r(1))*(1-r(2)),f(1)*f(2),0;
        r(1),r(1)*r(2),(1-f(1))*(1-f(2)),r(2);
        0,r(1)*(1-r(2)),(1-f(1))*f(2),1-r(2);
        ];
    return
end

if (N==3)
    %     p(0,0,1)=(1-r1)*p(0,0,1)+(1-r1)r2*p(1,0,0)+(1-r1)(1-f2)*p(1,0,1)+f1(1-f2)*p(1,1,1)
    %     p(1,0,0)=(1-r1)(1-r2)*p(1,0,0)+(1-r1)f2*p(1,0,1)+f1f2*p(1,1,1)
    %     p(1,0,1)=(1-r1)r2*p(2,0,0)+f1r2*p(2,1,0)+f1(1-f2)*p(2,1,1)
    %     p(1,1,1)=r1*p(0,0,1)+r1r2*p(1,0,0)+r1*(1-f2)*p(1,0,1)+(1-f1)(1-f2)*p(1,1,1)
    %     p(2,0,0)=(1-r1)(1-r2)*p(2,0,0)+f1*(1-r2)*p(2,1,0)+f1f2*p(2,1,1)
    %     p(2,1,0)=r1(1-r2)*p(1,0,0)+r1f2*p(1,0,1)+(1-f1)f2*p(1,1,1)
    %     p(2,1,1)=r1r2*p(2,0,0)+(1-f1)r2*p(2,1,0)+(1-f1)(1-f2)*p(2,1,1)+r2*p(3,1,0)
    %     p(3,1,0)=r1(1-r2)*p(2,0,0)+(1-f1)(1-r2)*p(2,1,0)+(1-f1)f2*p(2,1,1)+(1-r2)*p(3,1,0)
    
    T=[
        1-r(1),(1-r(1))*r(2),(1-r(1))*(1-f(2)),f(1)*(1-f(2)),0,0,0,0;
        0,(1-r(1))*(1-r(2)),(1-r(1))*f(2),f(1)*f(2),0,0,0,0;
        0,0,0,0,(1-r(1))*r(2),f(1)*r(2),f(1)*(1-f(2)),0;
        r(1),r(1)*r(2),r(1)*(1-f(2)),(1-f(1))*(1-f(2)),0,0,0,0;
        0,0,0,0,(1-r(1))*(1-r(2)),f(1)*(1-r(2)),f(1)*f(2),0;
        0,r(1)*(1-r(2)),r(1)*f(2),(1-f(1))*f(2),0,0,0,0;
        0,0,0,0,r(1)*r(2),(1-f(1))*r(2),(1-f(1))*(1-f(2)),r(2);
        0,0,0,0,r(1)*(1-r(2)),(1-f(1))*(1-r(2)),(1-f(1))*f(2),1-r(2)
        ];
    return;
end
%   N>=3

% Internal equations:
% p(n,0,0)=(1-r1)(1-r2)*p(n,0,0)+(1-r1)f2*p(n,0,1)+f1(1-r2)*p(n,1,0)+f1f2*p(n,1,1)
% p(n,0,1)=(1-r1)r2*p(n+1,0,0)+(1-r1)(1-f2)*p(n+1,0,1)+f1r2*p(n+1,1,0)+f1(1-f2)*p(n+1,1,1)
% p(n,1,0)=r1(1-r2)*p(n-1,0,0)+r1f2*p(n-1,0,1)+(1-f1)(1-r2)*p(n-1,1,0)+(1-f1)f2*p(n-1,1,1)
% p(n,1,1)=r1r2*p(n,0,0)+r1(1-f2)p(n,0,1)+(1-f1)r2*p(n,1,0)+(1-f1)(1-f2)p(n,1,1)
% 4*n-3: p(n,0,0)
% 4*n-2: p(n,0,1)
% 4*n-1: p(n,1,0)
% 4*n: p(n,1,1)
T=zeros(N*4-4);
for buffer=2:N-2
    index=buffer*4-3;
    T(index,index)=(1-r(1))*(1-r(2));
    T(index,index+1)=(1-r(1))*f(2);
    T(index,index+2)=f(1)*(1-r(2));
    T(index,index+3)=f(1)*f(2);
    if (buffer~=N-2)
        index=buffer*4-2;
        T(index,index+3)=(1-r(1))*r(2);
        T(index,index+4)=(1-r(1))*(1-f(2));
        T(index,index+5)=f(1)*r(2);
        T(index,index+6)=f(1)*(1-f(2));
    end
    if (buffer~=2)
        index=buffer*4-1;
        T(index,index-6)=r(1)*(1-r(2));
        T(index,index-5)=r(1)*f(2);
        T(index,index-4)=(1-f(1))*(1-r(2));
        T(index,index-3)=(1-f(1))*f(2);
    end
    index=buffer*4;
    T(index,index-3)=r(1)*r(2);
    T(index,index-2)=r(1)*(1-f(2));
    T(index,index-1)=(1-f(1))*r(2);
    T(index,index)=(1-f(1))*(1-f(2));
end
% 1:p(0,0,1)
% 2:p(1,0,0)
% 3:p(1,0,1)
% 4:p(1,1,1)
% 5:p(2,0,0)
% 6:p(2,0,1)
% 7:p(2,1,0) NOTE: this is a lower boundry equation
% 8:p(2,1,1)
%   Lower boundry equations
%   p(0,0,1)=(1-r1)*p(0,0,1)+(1-r1)r2*p(1,0,0)+(1-r1)(1-f2)*p(1,0,1)+f1(1-f2)*p(1,1,1)
%   p(1,0,0)=(1-r1)(1-r2)*p(1,0,0)+(1-r1)f2*p(1,0,1)+f1f2*p(1,1,1)
%   p(1,0,1)=(1-r1)r2*p(2,0,0)+(1-r1)(1-f2)*p(2,0,1)+f1r2*p(2,1,0)+f1(1-f2)*p(2,1,1)
%   p(1,1,1)=r1*p(0,0,1)+r1r2*p(1,0,0)+r1(1-f2)*p(1,0,1)+(1-f1)(1-f2)*p(1,1,1)
%   p(2,1,0)=r1(1-r2)*p(1,0,0)+r1f2*p(1,0,1)+(1-f1)f2*p(1,1,1)

T(1,1)=1-r(1);
T(1,2)=(1-r(1))*r(2);
T(1,3)=(1-r(1))*(1-f(2));
T(1,4)=f(1)*(1-f(2));
T(2,2)=(1-r(1))*(1-r(2));
T(2,3)=(1-r(1))*f(2);
T(2,4)=f(1)*f(2);
T(3,5)=(1-r(1))*r(2);
T(3,6)=(1-r(1))*(1-f(2));
T(3,7)=f(1)*r(2);
T(3,8)=f(1)*(1-f(2));
T(4,1)=r(1);
T(4,2)=r(1)*r(2);
T(4,3)=r(1)*(1-f(2));
T(4,4)=(1-f(1))*(1-f(2));
T(7,2)=r(1)*(1-r(2));
T(7,3)=r(1)*f(2);
T(7,4)=(1-f(1))*f(2);

%   Upper boundry equations:
% 4N-11:p(N-2,0,0)
% 4N-10:p(N-2,0,1)    NOTE: this is a upper boundry equation
% 4N-9:p(N-2,1,0)
% 4N-8:p(N-2,1,1)
% 4N-7:p(N-1,0,0)
% 4N-6:p(N-1,1,0)
% 4N-5:p(N-1,1,1)
% 4N-4:p(N,1,0)
% p(N-2,0,1)=(1-r1)r2*p(N-1,0,0)+f1r2*p(N-1,1,0)+f1(1-f2)*p(N-1,1,1)
% p(N-1,0,0)=(1-r1)(1-r2)*p(N-1,0,0)+f1(1-r2)*p(N-1,1,0)+f1f2*p(N-1,1,1)
% p(N-1,1,0)=r1(1-r2)*p(N-2,0,0)+r1f2*P(N-2,0,1)+(1-f1)(1-r2)*p(N-2,1,0)+(1-f1)f2*p(N-2,1,1)
% p(N-1,1,1)=r1r2*p(N-1,0,0)+(1-f1)r2*p(N-1,1,0)+(1-f1)(1-f2)*p(N-1,1,1)+r2*p(N,1,0)
% p(N,1,0)=r1(1-r2)*p(N-1,0,0)+(1-f1)(1-r2)*p(N-1,1,0)+(1-f1)f2*p(N-1,1,1)+(1-r2)*p(N,1,0)
T(4*N-10,4*N-7)=(1-r(1))*r(2);
T(4*N-10,4*N-6)=f(1)*r(2);
T(4*N-10,4*N-5)=f(1)*(1-f(2));
T(4*N-7,4*N-7)=(1-r(1))*(1-r(2));
T(4*N-7,4*N-6)=f(1)*(1-r(2));
T(4*N-7,4*N-5)=f(1)*f(2);
T(4*N-6,4*N-11)=r(1)*(1-r(2));
T(4*N-6,4*N-10)=r(1)*f(2);
T(4*N-6,4*N-9)=(1-f(1))*(1-r(2));
T(4*N-6,4*N-8)=(1-f(1))*f(2);
T(4*N-5,4*N-7)=r(1)*r(2);
T(4*N-5,4*N-6)=(1-f(1))*r(2);
T(4*N-5,4*N-5)=(1-f(1))*(1-f(2));
T(4*N-5,4*N-4)=r(2);
T(4*N-4,4*N-7)=r(1)*(1-r(2));
T(4*N-4,4*N-6)=(1-f(1))*(1-r(2));
T(4*N-4,4*N-5)=(1-f(1))*f(2);
T(4*N-4,4*N-4)=1-r(2);

end
